name: Docker image build and publish
on:
  workflow_dispatch:
    inputs:
      docker_backend_build_dir:
        description: Docker backend build directory (default = '.')
        default: "backend"
        type: string
      docker_frontend_build_dir:
        description: Docker frontend build directory (default = '.')
        default: "frontend"
        type: string
      backend_image_tag:
        description: Tag to apply to backend images.
        type: string
        default: backend-artifact-latest
      frontend_image_tag:
        description: Tag to apply to frontend images.
        type: string
        default: frontend-artifact
      aws_account_id:
        description: AWS Account ID
        type: string
      aws_region:
        description: Target AWS Region
        default: "us-east-1"
        type: string
      ecr_backend_repo_name:
        description: ecr backend repo name
        default: "mlopsbackend"
        type: string
      ecr_frontend_repo_name:
        description: ecr frontend repo name
        default: "mlopsfrontend"
        type: string
      ml_model_run_id:
        description: mlflow run id where the model was logged
        default: ""
        type: string
env:
  path_to_dockerfile_backend: backend/dockerfile
  path_to_dockerfile_frontend: frontend/dockerfile
  ECS_FRONTEND_SERVICE: mlops-backend-service      # name of the service
  ECS_BACKEND_SERVICE: mlopsbackendservice
  ECS_CLUSTER: mlopscasestudy24                    # name of the cluster
  ECS_FRONTEND_TASK_DEFINITION: .github/workflows/.aws/taskdefinitionecsfrontend.json # path of the JSON task definition
  ECS_BACKEND_TASK_DEFINITION: .github/workflows/.aws/taskdefinitionevsbackend.json #
  FRONTEND_CONTAINER_NAME: "mlops-frontend"
  BACKEND_CONTAINER_NAME: "mlopsbackend"                          # name of the container name in the task definition 

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      backend_image_tag: ${{ steps.build-publish-backend.outputs.backend_image_tag }}
      backend_full_image: ${{ steps.build-publish-backend.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: Login to Amazon ECR
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry-type: public
          mask-password: 'false'

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-publish-backend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_backend_repo_name }}
          IMAGE_TAG: ${{ inputs.backend_image_tag }}
        run: |
          docker build "${{ inputs.docker_backend_build_dir }}" -f "$path_to_dockerfile_backend" --build-arg ML_MODEL_RUN_ID="${{ inputs.ml_model_run_id }}" -t "$ECR_REGISTRY/g8n4d6q1/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/g8n4d6q1/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Build, tag, and push frontend image to Amazon ECR
        id: build-publish-frontend
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_REPOSITORY: ${{ inputs.ecr_frontend_repo_name }}
          IMAGE_TAG: ${{ inputs.frontend_image_tag }}
        run: |
          docker build "${{ inputs.docker_frontend_build_dir }}" -f "$path_to_dockerfile_frontend" --build-arg ML_MODEL_RUN_ID="${{ inputs.ml_model_run_id }}" -t "$ECR_REGISTRY/g8n4d6q1/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/g8n4d6q1/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      # - name: Fill in the new image ID of backend in the Amazon ECS task definition
      #   id: task-def-backend
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_BACKEND_TASK_DEFINITION }}
      #     container-name: ${{ env.BACKEND_CONTAINER_NAME }}
      #     image: ${{ steps.build-publish-backend.outputs.full_image }}

      - name: Retrieve backend task definition
        id: retrive-task-definition-backend
        env:
          BACKEND_TASK_DEFNITION_NAME: mlops-backend-deploy
        run: |
          task_definition=$(aws ecs describe-task-definition --task-definition $BACKEND_TASK_DEFNITION_NAME --query 'taskDefinition' --output json)
          echo "::set-output name=task_definition::$task_definition"

      - name: Update task definition
        id: update-task-definition-backend
        env:
          ECR_IMAGE_BACKEND: ${{ steps.build-publish-backend.outputs.full_image }}
          BACKEND_TASK_DEFNITION_NAME: mlops-backend-deploy
        run: |
          # Use jq to update the task definition JSON
          updated_task_definition=$(echo ${{ steps.retrive-task-definition-backend.outputs.task_definition }} | jq '.containerDefinitions[0].image = "$ECR_IMAGE_BACKEND"')
          echo "::set-output name=updated_task_definition::$updated_task_definition"

      - name: Register updated task definition
        run: |
          # Register the updated task definition
          aws ecs register-task-definition --cli-input-json ${{ steps.update-task-definition-backend.outputs.updated_task_definition }}

      - name: Deploy Amazon ECS task definition for backend
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.update-task-definition-backend.outputs.updated_task_definition }}
          cluster: ${{ env.ECS_CLUSTER }}
          service: ${{ env.ECS_BACKEND_SERVICE }}

      # - name: Fill in the new image ID of frontend in the Amazon ECS task definition
      #   id: task-def-frontend
      #   uses: aws-actions/amazon-ecs-render-task-definition@c804dfbdd57f713b6c079302a4c01db7017a36fc
      #   with:
      #     task-definition: ${{ env.ECS_FRONTEND_TASK_DEFINITION }}
      #     container-name: ${{ env.FRONTEND_CONTAINER_NAME }}
      #     image: ${{ steps.build-publish-frontend.outputs.full_image }}

      # - name: Deploy Amazon ECS task definition for frontend
      #   uses: aws-actions/amazon-ecs-deploy-task-definition@df9643053eda01f169e64a0e60233aacca83799a
      #   with:
      #     task-definition: ${{ steps.task-def-frontend.outputs.task-definition }}
      #     cluster: ${{ env.ECS_CLUSTER }}
      