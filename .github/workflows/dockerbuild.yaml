name: Docker image build and publish
on:
  workflow_dispatch:
    inputs:
      path_to_dockerfile_ui:
        description: Path to the dockerfile (default = 'Dockerfile')
        default: "frontend/dockerfile"
        type: string
      path_to_dockerfile_backend:
        description: Path to the dockerfile (default = 'Dockerfile')
        default: "backend/dockerfile"
        type: string
      image_tag:
        description: Tag to apply to images.
        type: string
        default: backend-artifact
      aws_account_id:
        description: AWS Account ID
        type: string
      aws_region:
        description: Target AWS Region
        default: "us-east-1"
        type: string

jobs:
  docker:
    runs-on: ubuntu-latest

    permissions:
      id-token: write
      contents: read

    outputs:
      image_tag: ${{ steps.build-publish.outputs.image_tag }}
      full_image: ${{ steps.build-publish.outputs.full_image }}

    steps:
      - uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ inputs.aws_region }}

      - name: prepare ECR repo name based on the Github repository
        shell: bash
        run: |
          set -eux

          # set ecr repo
          echo "ECR_REPO_NAME=${public.ecr.aws/g8n4d6q1/mlopsbackend}" >> $GITHUB_ENV

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: ${{ inputs.aws_account_id }}
          mask-password: "true" # see: https://github.com/aws-actions/amazon-ecr-login#docker-credentials

      - name: Build, tag, and push backend image to Amazon ECR
        id: build-publish
        shell: bash
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ env.ECR_REPO_NAME }}
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          docker build "${{ inputs.docker_build_dir }}" -f "${{ inputs.path_to_dockerfile }}" -t "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          docker push "$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
          echo "IMAGE $IMAGE_TAG is pushed to $ECR_REGISTRY/$ECR_REPOSITORY"
          echo "image_tag=$IMAGE_TAG" 
          echo "full_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"